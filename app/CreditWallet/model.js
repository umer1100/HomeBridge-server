/**
 * CREDITWALLET MODEL
 *
 * Find Table Schema Here: "/database/schema.sql"
 *
 *
 * -- Credit Wallet TABLE --
 * CREATE TABLE IF NOT EXISTS CreditWallet (
 *   id BIGSERIAL PRIMARY KEY NOT NULL,
 *
 *   userId BIGINT DEFAULT NULL REFERENCES Users(id),
 *
 *   ownerificDollars REAL DEFAULT 0.0,
 *
 *   -- Autogenerated by Sequelize
 * deletedAt TIMESTAMP WITHOUT TIME ZONE DEFAULT NULL,
 * createdAt TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT (now() AT TIME ZONE 'utc'),
 * updatedAt TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT (now() AT TIME ZONE 'utc')
 * );
 *
 */

'use strict';

// require custom node modules
const constants = require('../../helpers/constants');

module.exports = (sequelize, DataTypes) => {
  const CreditWallet = sequelize.define(
    'creditWallet',
    {
      // All foreign keys are added in associations

      userId: {
        type: DataTypes.BIGINT,
        allowNull: false
      },

      ownerificDollars: {
        type: DataTypes.DECIMAL(20, 2),
        allowNull: false,
        defaultValue: 0.0,
        validate: {
          isDecimal: true
        },
        get() {
          // convert string to float
          const rawValue = this.getDataValue(ownerificDollars);
          return Number(rawValue);
        }
      }
    },
    {
      timestamps: true, // allows sequelize to create timestamps automatically

      // A paranoid table is one that, when told to delete a record, it will not truly delete it. Instead, a special column called deletedAt will have its value set to the timestamp of that deletion request. This means that paranoid tables perform a soft-deletion of records, instead of a hard-deletion.
      // For select (findOne, findAll etc) automatically ignore all rows when deletedAt is not null, if you really want to let the query see the soft-deleted records, you can pass the paranoid: false option to the query method
      paranoid: true,
      freezeTableName: true, // allows sequelize to pluralize the model name
      tableName: 'CreditWallets', // define table name, must be PascalCase!
      hooks: {},
      indexes: []
    }
  );

  // association
  CreditWallet.associate = models => {
    CreditWallet.belongsTo(models.user, { foreignKey: 'userId' });
  };

  return CreditWallet;
};
