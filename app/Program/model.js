/**
 * PROGRAM MODEL
 *
 * 
 * id BIGSERIAL PRIMARY KEY NOT NULL,

 * organizationId BIGINT DEFAULT NULL REFERENCES Organizations(id),

 * isProgramActive BOOLEAN NOT NULL DEFAULT FALSE,
 * signupBonusActive BOOLEAN NOT NULL DEFAULT FALSE,
 * signupBonusValue REAL DEFAULT 0.0,
 * defaultContribution REAL DEFAULT 0.0,

 * -- Autogenerated by Sequelize
 * deletedAt TIMESTAMP WITHOUT TIME ZONE DEFAULT NULL,
 * createdAt TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT (now() AT TIME ZONE 'utc'),
 * updatedAt TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT (now() AT TIME ZONE 'utc')
 * 
 */

'use strict';

// require custom node modules
const constants = require('../../helpers/constants');

module.exports = (sequelize, DataTypes) => {
  const Program = sequelize.define(
    'program',
    {
      // All foreign keys are added in associations

      isProgramActive: {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        defaultValue: false
      },

      signupBonusValue: {
        type: DataTypes.DECIMAL(5, 2),
        allowNull: false,
        defaultValue: 0.0
      },

      signupBonusActive: {
        type: DataTypes.BOOLEAN,
        allowNull: false,
        defaultValue: false
      },

      defaultContribution: {
        type: DataTypes.DECIMAL(5, 2),
        allowNull: false,
        defaultValue: 0.0
      }
    },
    {
      timestamps: true, // allows sequelize to create timestamps automatically

      // A paranoid table is one that, when told to delete a record, it will not truly delete it. Instead, a special column called deletedAt will have its value set to the timestamp of that deletion request. This means that paranoid tables perform a soft-deletion of records, instead of a hard-deletion.
      // For select (findOne, findAll etc) automatically ignore all rows when deletedAt is not null, if you really want to let the query see the soft-deleted records, you can pass the paranoid: false option to the query method
      paranoid: true,
      freezeTableName: true, // allows sequelize to pluralize the model name
      tableName: 'Programs', // define table name, must be PascalCase!
      hooks: {},
      indexes: []
    }
  );

  // association
  Program.associate = models => {
    Program.belongsTo(models.organization, { foreignKey: 'organizationId' });
  };

  return Program;
};
