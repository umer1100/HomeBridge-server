/**
 * RESOURCE MODEL
 *
 * Find Table Schema Here: "/database/schema.sql"
 *
 *
 * CREATE TABLE IF NOT EXISTS Resources (
 *  id BIGSERIAL PRIMARY KEY NOT NULL,
 *
 *  name STRING NOT NULL,
 *  description TEXT NOT NULL,
 *  infoURL TEXT NOT NULL,
 *  imageURL TEXT NOT NULL,
 *
 *  -- Autogenerated by Sequelize
 *  deletedAt TIMESTAMP WITHOUT TIME ZONE DEFAULT NULL,
 *  createdAt TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT (now() AT TIME ZONE 'utc'),
 *  updatedAt TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT (now() AT TIME ZONE 'utc')
 *)
 *
 *
 *
 */

'use strict';

// require custom node modules
const constants = require('../../helpers/constants');

module.exports = (sequelize, DataTypes) => {
  const Resource = sequelize.define('resource', {
    id: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      autoIncrement: true,
      allowNull: false,
    },
    // All foreign keys are added in associations

    name: {
      type: DataTypes.STRING,
      allowNull: false
    },

    description: {
      type: DataTypes.TEXT,
      allowNull: false,
    },

    infoURL: {
      type: DataTypes.STRING,
      allowNull: false
    },

    imageURL: {
      type: DataTypes.STRING,
      allowNull: false
    },

  }, {
    timestamps: true, // allows sequelize to create timestamps automatically

    // A paranoid table is one that, when told to delete a record, it will not truly delete it. Instead, a special column called deletedAt will have its value set to the timestamp of that deletion request. This means that paranoid tables perform a soft-deletion of records, instead of a hard-deletion.
    // For select (findOne, findAll etc) automatically ignore all rows when deletedAt is not null, if you really want to let the query see the soft-deleted records, you can pass the paranoid: false option to the query method
    paranoid: true,
    freezeTableName: true, // allows sequelize to pluralize the model name
    tableName: 'Resources', // define table name, must be PascalCase!
    hooks: {},
    indexes: []
  });

  // association
  Resource.associate = models => {
    Resource.hasMany(models.address, {
      foreignKey: 'addressableId',
      constraints: false,
      scope: {
        addressableType: 'resource'
      }
    })
  };

  return Resource;
}
