/**
 * PLAIDACCOUNT MODEL
 *
 * Find Table Schema Here: "/database/schema.sql"
 * 
 * id BIGSERIAL PRIMARY KEY NOT NULL,

 * userId BIGINT DEFAULT NULL REFERENCES Users(id),
 * itemId TEXT NOT NULL UNIQUE,
 * accountId TEXT NOT NULL UNIQUE,
 * accessToken TEXT NOT NULL UNIQUE,
 * name TEXT NOT NULL,
 * mask TEXT NOT NULL,
 * processorToken TEXT DEFAULT NULL,
 * custUrl TEXT DEFAULT NULL,
 * fundingSourceURL TEXT DEFAULT NULL,
 * type TEXT DEFAULT NULL,
 * subtype TEXT DEFAULT NULL, 
 * -- Autogenerated by Sequelize
 * deletedAt TIMESTAMP WITHOUT TIME ZONE DEFAULT NULL,
 * createdAt TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT (now() AT TIME ZONE 'utc'),
 * updatedAt TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT (now() AT TIME ZONE 'utc')
 */

'use strict';

// require custom node modules
const constants = require('../../helpers/constants');

module.exports = (sequelize, DataTypes) => {
  const PlaidAccount = sequelize.define(
    'plaidAccount',
    {
      // All foreign keys are added in associations

      itemId: {
        type: DataTypes.TEXT,
        allowNull: false
      },

      accountId: {
        type: DataTypes.TEXT,
        allowNull: false
      },

      accessToken: {
        type: DataTypes.TEXT,
        allowNull: false
      },

      name: {
        type: DataTypes.TEXT,
        allowNull: false
      },

      mask: {
        type: DataTypes.TEXT,
        allowNull: false
      },

      processorToken: {
        type: DataTypes.TEXT,
        defaultValue: null
      },

      custUrl: {
        type: DataTypes.TEXT,
        defaultValue: null
      },

      fundingSourceUrl: {
        type: DataTypes.TEXT,
        defaultValue: null
      },

      type: {
        type: DataTypes.TEXT,
        defaultValue: null
      },

      subtype: {
        type: DataTypes.TEXT,
        defaultValue: null
      },

      institutionName: {
        type: DataTypes.TEXT,
        defaultValue: null
      }
    },
    {
      timestamps: true, // allows sequelize to create timestamps automatically

      // A paranoid table is one that, when told to delete a record, it will not truly delete it. Instead, a special column called deletedAt will have its value set to the timestamp of that deletion request. This means that paranoid tables perform a soft-deletion of records, instead of a hard-deletion.
      // For select (findOne, findAll etc) automatically ignore all rows when deletedAt is not null, if you really want to let the query see the soft-deleted records, you can pass the paranoid: false option to the query method
      paranoid: true,
      freezeTableName: true, // allows sequelize to pluralize the model name
      tableName: 'PlaidAccounts', // define table name, must be PascalCase!
      hooks: {},
      indexes: []
    }
  );

  // association
  PlaidAccount.associate = models => {
    PlaidAccount.belongsTo(models.user, { foreignKey: 'userId' });
  };

  PlaidAccount.associate = models => {
    PlaidAccount.hasMany(models.transaction, { foreignKey: 'fundedAccountId' });
  };

  PlaidAccount.associate = models => {
    PlaidAccount.hasMany(models.transaction, { foreignKey: 'sourcedAccountId' });
  };

  return PlaidAccount;
};
